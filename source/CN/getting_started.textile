h2. 与Rails的第一次接触

本指导手册覆盖了入门和运行 ruby on rails，通过阅读本指导，你会了解到：

* （怎样）安装，创建一个新的 Rails 应用程序，并且将你的应用程序连接到数据库
* Rails的一般（页面）布局
* MVC的基本原则和 RESTful 设计（理念）
* 怎样快捷的开始一个 Rails 应用

endprologue.

警告. 这个指导手册适用与 Rails 3.1，有些代码在 Rails 早期版本可能会不工作。

h3. 手册假设

本指导设计给那些想大概的了解 Rails 应用创建的初学者。这里假设你对 Rails 没有任何预先的了解。不管怎样要得到（本手册的）知识，你需要预先安装：

* "Ruby":http://www.ruby-lang.org/en/downloads version 1.8.7 或者更高

TIP: 注意 Ruby 1.8.7 p248 and p249 有 marshaling bugs 会与 Rails 3.0 发生冲突。Ruby 1.8.7 p248 and p249在 发行版1.8.7-2010.02 已经得到解决。Ruby 1.9 前提下，Ruby 1.9.1 不能使用因为它在 Rails 3.0上会出现segfaults错误，因此如果你希望使用 Rails 3 和 1.9.x 跳至 1.9.2 （就可以）平稳的驾驶 Rails。
  A segmentation fault (aka segfault) is a common condition that causes programs to crash; they are often associated with a file named core . Segfaults are caused by a program trying to read or write an illegal memory location.

* "RubyGems":http://rubyforge.org/frs/?group_id=126 包管理系统
  ** 如果你想了解更多关于RubyGems，请阅读 "RubyGems User Guide":http://docs.rubygems.org/read/book/1
* 安装"SQLite3 Database":http://www.sqlite.org

Rails是一个基于Ruby程序语言的web程序框架。如果你没有预先的学习ruby，你会发现直接的入门Rails学习很有跨度。这里有一些学习ruby的免费互联网资源。

* "Mr. Neighborly's Humble Little Ruby Book":http://www.humblelittlerubybook.com
* "Programming Ruby":http://www.ruby-doc.org/docs/ProgrammingRuby/
* "Why's (Poignant) Guide to Ruby":http://mislav.uniqpath.com/poignant-guide/

h3. Rails是什么

TIP: 这个章节开始就 Rails 框架的背景和来源做一个详细的描述。你可以安全的跳过这个章节并且在以后再回过头来看它。第三节你会开始你的的 Rails 之旅上的第一个 Rails 应用程序。

Rails是一个使用Ruby语言编写的的web框架应用程序。其设计目的是为了让每个着手开始编写web应用程序的开发人员更加容易的完成工作。它允许你写最少的代码完成超过其他任何语言和框架所完成的工作。经验丰富的Rails开发人员还告诉我们通过Rails使设计web应用程序更快乐。

Rails是一个值得骄傲的软件。它使得我们以最好的方式去做事情，它也鼓励这种方式——并在某些情况下，鼓励替代的思想，如果你学习 “Rails 方式” 你将会适时的发现生产力的巨大增长。如果你固守在来自其他语言的旧的习惯去进行你的 Rails 开发，以以它地方学来的模式尝试Rails，那么你将会得到很少的快乐的经历。

Rails 理念包含几个指导原则

* DRY - 不要自己重复——建议一次又一次编写同样的代码是一件坏事请。
* 约定优于配置——意思是 Rails 假设对于你想做什么以及你想怎么做的事情，刻意的做很少的事情比编写无尽的配置文件更好

h4. MVC架构

Model，View，Controller架构是Rails的核心，通常称之为MVC。MVC 的优点如下:
* 用户界面与业务逻辑的分离
* 很容易使得代码保持 DRY # “Don’t Repeat Yourself”
* 明确代码的不同之处使之跟容易维护

h5. 模型

模型代表了应用程序的信息（数据）和操纵这些数据的规则。在 Rails 中， models 主要用于管理数据表和相应的规则的互动。在大多数情况，在你数据库中的每个表都会和你的应用程序互动。你应用程序的逻辑业务将会集中放置在 models 中。

h5. 视图

View代表了应用程序的用户界面。在Rails中，Views通常是嵌入了执行演示数据任务的Ruby代码的HTML文件。Views完成了给web浏览器或者其他工具用于提出来自你的程序的请求提供数据。

h5. 控制器

Controllers 提供了models和视图间的粘合。在 Rails 中，controllers 相应来自 web 浏览器请求的进程，向 models 询问数据以及传递数据给 views 用于呈现。

h3. Rails 的组件

Rails关联着许多独立的组件。对这些组件在下面给出简要的解释。如果你是Rails的新人，当你阅读到这个部分，不要抛弃任何一个组件的描述，而且他们还会做进一步解释。例如，我们将会构造应用骨架，但是在这里，你不需要知道关于他们的更进一步的任何知识。

* Action Pack活动组
  ** Action Controller 活动控制
  ** Action Dispatch 活动传输
  ** Action View 活动视图
* Action Mailer 活动信封
* Active Model 
* Active Record 
* Active Resource 
* Active Support 
* Railties 
h4. Action Pack

Action Pack是一个单独的包它包含了 Action Controller, Action View and Action Dispatch（传输调度）。是MVC的VC部分。

h5. Action Controller

Action Controller是在Rails中管理控制的组件。 The Action Controller框架进程收到Rails应用程序的请求，提取参数，以及调度他们到具有相应义务的动作。这些服务是由 Action Controller包含了会话管理部分，模板渲染（翻译），重定向部分。

h5. Action Dispatch

Action Dispatch处理了你的和其他部分的应用程序的路由——这些web请求以及一些你所期望的调度。Rack applications 是更高级的主题它涵盖在一个叫做 "Rails on Rack":http://guides.rubyonrails.org/rails_on_rack.html 的教程中。

h5. Action Mailer

Action Mailer 是一个营造 E-mail 服务的框架。你可以使用 Action Mailer 去发送、接收 email 以及发送一些简单的计划文本或者基于灵活模板的复杂的多重的电子邮件。

h5. Active Model

Active Model 提供了 Action Pack gem 服务和 Object Relationship Mapping gems 之间的接口定义，比如Active记录。Active Model 允许 Rails 在 Active Record 部分采用其他 ORM 框架如果你的应用程序需要。

h5. Active Record

Active Record 是一个 Rails 应用程序的 models 根本。它提供独立的数据库，基于 CRUD 功能，先进（高级）的查找能力，和与另一个 models 关联的能力，几乎所有其他服务。

h5. Active Resource

Active Resource提供一个管理目标业务和 RESTful web 服务之间连接的框架。它实现了使用 CRUD 语义测绘 web-base 资源到本地目标。

h5. Active Support

Active Support 是一个广泛收集实用工具类和标准的 Ruby 库的扩展，它们由的核心代码和您的应用程序（决定）。

h5. Railties

Railties 是在 Rails 代码中创建新 Rails 应用以及在任何 Rails 应用中把粘和各种插件在一起的核心。

h3. REST

Rest作为具有代表性的状态传输是RESTful架构的基础。普遍认为它来自Roy Fielding’s doctoral 的博士论文" Architectural Styles and the Design of Network-based Software Architectures":http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm 当你阅读这篇论文的时候,（可以发现）REST在Rails下面可以归纳为下面的主要原则：

* 使用资源标识符比如URLs去表现资源
* Transferring representations of the state of that resource between system components.在系统组件之间转移（传送）资源的状态

例如，下面的HTTP请求：

DELETE /photos/17

（系统）将会明白参照ID为14的phone资源，注明删除该资源。REST的自然风格去架构web应用程序， Rails 通过这样的钩子，使你避免了许多复杂的RESTful和浏览器之间的差异。

If you’d like more details on REST as an architectural#架构风格 style, these resources are more approachable平易近人 than Fielding’s thesis:如果你希望得到很多的关于REST架构风格的介绍，下面的资源是这个领域里面通俗论文。

* A Brief Introduction to REST by Stefan Tilkov 
* An Introduction to REST (video tutorial) by Joe Gregorio 
* Representational State Transfer article in Wikipedia 
* How to GET a Cup of Coffee by Jim Webber, Savas Parastatidis & Ian Robinson 

h3. 建立一个新的 Rails 应用程序

学习（使用）本指导的最好方式是跟随这里描述的每一步，不写代码或者没有例子所需的步骤会使得这个例子被冷落，你可以根据文字描述的步骤一步接着一步的操作。如果你需要完整的代码你可以从这里下载 "Getting Started Code":https://github.com/mikel/getting-started-code 。

如果你跟随这个指导，你将会创建一个叫做 blog 的 Rails 项目——一个非常简单的网络博客。当你准备开始构建这个项目之前你需要确保Rails已经完全安装。

TIP: The examples below use # and $ to denote terminal prompts. If you are using Windows, your prompt will look something like c:\source_code>
TIP: 下面例子中使用 `#` 和 `$` 来表示 终端提示。如果你正在使用 Windows提示可能会这样 `c:\source_code>`

h4. 安装Rails

通过方便的 RubyGems提供的 +gem install+，安装 Rails：

<shell>
# gem install rails
</shell>

TIP. 如果你在Window下面工作，你可以使用 "Rails Installer":http://railsinstaller.org 快速安装Ruby and Rails。

确认所有的（依赖）安装正确，你应该运行如下命令：

<shell>
$ rails --version
</shell>

如果终端提示类似这样的文字 "Rails 3.2.2" 那么你已经准备好继续了。

h4. Creating the Blog Application

开始，打开一个 terminal,导航至一个你有权限创建文件的文件夹，并输入：

<shell>
$ rails new blog #--skip-bundle    # Don't run bundle install这样在国内就不会由于连不上gem即便上能够上也会很慢半天没反映 可以尝试使用 淘宝gem镜像
</shell>

这里将创建一个名叫Blog的Rails应用程序在名称为blog的目录中。

TIP: 你可以通过运行rails new -h，查看rails应用程序创建器的所有命令（开关）。
 <tt>rails new -h</tt>.

当你创建了这个blog程序，跳转到它所在的文件夹中（直接对这个程序编辑）.

<shell>
$ cd blog
</shell>

命令 +rails new blog+ 将会创建一个名为<tt>blog</tt>的文件夹在你的工作目录中。目录 <tt>blog</tt> 一些自动生成的文件它构成了 Rails 应用程序的结构。在这个体验中的大多数的工作都是在app/这个文件夹中完成的，这里对Rails创建的新应用中的每一个文件夹的功能做出了一个概述：

|_.File/Folder|_.Purpose|
|app/|包含 controllers, models, views和 你应用程序的assets（资源），再接下面的手册中你主要的注意力应该放在这里。|
|config/|配置你的应用程序的运行的规则，（url）路由，数据库和其他。|
|config.ru|基于Rack服务器使用这个应用程序的Rack配置|
|db/|显示你当前的数据表，同样也显示数据迁移。你将会简单的了解关于（数据）迁移。|
|doc/|应用程序的（深入）全面的文档。|
|Gemfile<BR />Gemfile.lock|这个文件让你可以（添加）你的Rails所需要的特殊的gem依赖关系。这个文件被Bundler gem 使用，更多的信息查看 "the Bundler website":http://gembundler.com |
|lib/|应用程序用到的扩展库（本手册没有涉及）|
|log/|应用程序的日志文件|
|public/|这是外部可见的唯一文件夹。包含静态文件和编译资源。|
|Rakefile|这个文件定位和载入能够在命令行中运行的任务。这个任务定义贯穿整个 Rails 的组件。除了修改Rakefile，你更应该添加你自己的任务的文件到你的应用程序的lib/tasks目录。|
|README.rdoc|这是一个简单的说明手册。你需要编辑这个文件告诉其他人你的应用程序可以做什么，怎么安装等等。|
|script/|包含运行你的app的rails脚本，或者其他用来配置或运行你的应用程序的scripts。|
|test/|单元测试， fixtures，或者其他test工具。他们在Testing Rails Applications里面有完整的讲述。|
|tmp/|临时文件|
|vendor/|放置第三方代码的地方。在一个典型的Rails应用程序中，这里包含Ruby Gems，Rails源代码（如果你把Rails安装到你的项目中）还包含一些预先包装好的额外的插件|

h3. Hello, Rails!

传统的方式之一，开始使用一种新的（命令）语法并得到快速掠过的文字。要得到这样的结果你需要使你的Rails程序运行。

h4. 启动web服务

你实际上已经有了一个 Rails 功能的应用程序了。看一看它，你需要在你的生产机器上启动一个 web 服务，你可以这样来启动。

<shell>
$ rails server
</shell>

TIP: 编译 CoffeeScript 到 JavaScript需要一个 JavaScript 运行库，确实一个运行库将会给出一个+execjs+ error。通常 Mac OS X 和 Windows 自带了一个 JavaScript 运行库。Rails 添加了 +therubyracer+  gem 到 `Gemfile` 的注释行中如果你需要可以取消对它的注释。+therubyrhino+ 推荐 JRuby 使用并且默认添加到 `Gemfile` 中如果应用程序在 `JRuby` 中创建。你可以查看所有的支持的运行库 "ExecJS":https://github.com/sstephenson/execjs#readme。

这里默认将开启一个WEBrick服务器的的实例（Rails也可能使用一些其他的web服务器）。查看你的应用程序的行为，打开一个浏览器并且导航到127.0.0.0：3000你将会看到一个Rails默认的信息页面。

!images/rails_welcome.png(Welcome Aboard screenshot)!

TIP: 要终止web服务，在命令运行的终端中按下 Ctrl+C 。在开发环境模式中，Rails 一般不需要你停止服务；你所做的更改将自动的编译进需要的文件中并且重启服务。

这个欢迎界面体现了一个新的Rails应用程序创建成功（通过了Rails的自检）。你可以点击‘ About your application’s environment’查看你的应用程序运行环境摘要信息。

h4. Rails 说 Hello"

要使Rails说出（显示）“你好”，你还需要创建一个最小的 controller和view。幸运的是，你可以完成这些通过一行命令。在终端中输入：

<shell>
$ rails generate controller welcome index
</shell>

TIP: 如果你在输入这个命令的时候出现没有这个命令错误，你需要明确的使用ruby来执行Rails命令。

Rails将会为你创建一些文件，包含‘app/views/home/index.html.erb’。.这个模板会用来显示在 home controller中的index action (method)的结果。在文本编辑器中打开这个文件并输入：

<code class="html">
<h1>Hello, Rails!</h1>
</code>

h4. 设置应用程序主页

现在我们已经创建了controller 和 view，我们还需要告诉Rails我们想在什么时候显示出来。在本例中，我们想让它在我们导航至站点url根目录 "http://localhost:3000":http://localhost:3000 的时候替代“Welcome Aboard”显示。

首先移除应用程序中的默认页面。

<shell>
$ rm public/index.html
</shell>

我们必须这样做因为，Rails将会传送任何在public的静态文件优先于我们在 controllers生成的动态（显示）内容。

现在你还必须告诉 Rails 你实际上的主页在哪里。在文本编辑器中打开 +config/routes.rb+ 。这是你应用程序的路由文件，它采用 DSL 语言囊括了告诉 Rails 怎样连接请求信息到 controllers 和 actions的所有条目。这个文件包含许多简单的路由命令，其中一条实际上是用于告诉我们怎样连接你站点根目录到一个指定的controller and acti。找到以root :to开头的那一行，注释掉它改成如下内容：

<ruby>
Blog::Application.routes.draw do

  #...
  # You can have the root of your site routed with "root"
  # just remember to delete public/index.html.
  root :to => "welcome#index"
</ruby>

+root :to => "welcome#index"+告诉 Rails 映射请求到应用程序的root action到 home 控制器的 index action。

现在你在浏览器中导航至 "http://localhost:3000":http://localhost:3000 ，你将会看到“Hello, Rails!”.

NOTE. 更多的信息请参见 "Rails Routing from the Outside In":routing.html.

h3. 使用Scaffolding快速创建并运行

是一个快速的方法产生应用程序的一些重要组成。如果你想使用一种简单的操作为新资源创建models,views和controllers，Scaffolding是一个不错的工具。

h3. 创建一个资源

在本示例中的blog应用程序，你可以使用scaffolded产生post资源：它表现为一个简单的blog posting。要完成这些，在终端输入如下命令：



创建器将会在应用程序中的一些文件夹中生成一些文件，并且还会编辑 config/routes.rb。下面这些产生的文件的大概说明：

|_.File/Folder|_.Purpose|
|db/migrate/20100207214725_create_posts.rb |将创建的posts表单迁移到你的数据库（会在你的命名前面加上时间）|
|app/models/post.rb |Post模型|
|test/unit/post_test.rb |Unit testing harness for the posts model|
|test/fixtures/posts.yml |模拟测试post|
|config/routes.rb  |Edited to include routing information for posts|
|app/controllers/posts_controller.rb|The Posts controller|
|app/views/posts/index.html.erb|一个显示所有post的视图|
|app/views/posts/edit.html.erb |一个编辑post的视图|
|app/views/posts/show.html.erb |一个显示一条post的视图|
|app/views/posts/new.html.erb |一个创建post的视图|
|app/views/posts/_form.html.erb |一个局部用于控制编辑和创建新视图的整体视效的表单|
|test/functional/posts_controller_test.rb|Functional testing harness for the posts controller|
|app/helpers/posts_helper.rb |使用post的helper|
|test/unit/helpers/posts_helper_test.rb  |Unit testing harness for the posts helper|
|app/assets/javascripts/posts.js.coffee |CoffeeScript for the posts controller|
|app/assets/stylesheets/posts.css.scss|Cascading style sheet for the posts controller|
|app/assets/stylesheets/scaffolds.css.scss |Cascading style sheet#层叠样式 to make the scaffolded views look better|

即便是scaffolding使你创建和运行非常快捷，但是产生的代码不可能完美的适合你的应用程序。你大多数都需要定制产生的代码。很多有经验的Rails开发人员完全不使用scaffolding，宁愿从头编写全部的代码。Rails，无论如何，使得为生成的models，controllers，views或者其他代码编定制模板非常简单。你可以在 "Creating and Customizing Rails Generators & Templates":http://guides.rubyonrails.org/generators.html 看到更多信息。

h4. 执行数据迁移

+rails generate scaffold+ 命令的一个产物就是数据迁移。Migrations是一个ruby类被设计用来使数据库表单的创建和修改变得简单。Rails使用rake命令来执行迁移，它还可以撤销已经应用的修改。 迁移文件名包含了一个时间戳确保了迁移能够完成。

如果你查看+db/migrate/20100207214725_create_posts.rb+ 这个文件(记住，你得到的可能会有略微不同),你将会发现：

<ruby>
class CreatePosts < ActiveRecord::Migration
  def change
    create_table :posts do |t|
    t.string :name
    t.string :title
    t.text :content

    t.timestamps
    end
  end
end
</ruby>

整个migration创建了一个名叫change的方法，该方法在你运行这个migration的时候被调用。这个方法中定义的行为也是可逆的，那就是说Rails知道怎样逆向改变这个migration，如果你需要恢复到上一次数据。默认情况下，当你运行这个migration，他将会创建一个包含两个字符串列和一个text列的表单。关于Rails migration的更多信息请阅读 "Rails Database Migrations":http://guides.rubyonrails.org/migrations.html 手册。

这个时候，你可以使用rake命令运行migration了：

<shell>
rake db:migrate
</shell>

Rails将会执行这个migration命令并且通知你它创建了Post表单。

<shell>
==  CreatePosts: migrating ====================================================
-- create_table(:posts)
   -> 0.0019s
==  CreatePosts: migrated (0.0020s) ===========================================
</shell>

TIP: 由于你默认工作在开发环境中，这个命令将会应用于开发环境会话的数据库位于你的config/database.yml 中。如果你想执行migration在其他环境中，比如以产品（环境）为实例，你必须明确调用的通过命令行中执行：rake db:migrate RAILS_ENV=production。

h4. 添加一个 Link

你已经创建好的post挂到主页上，你可以通过添加一个link到主页。打开 app/views/home/index.html.erb并且按照下面所示更改：

<erb>
<h1>Hello, Rails!</h1>
<%= link_to "My Blog", posts_path %>
</erb>

这个链接方法是Rails在 view helpers 的内建方法之一 。它创建一个基于文字的超级链接并显示到哪里，在这个实例中（跳转）到posts。

h4. Working with Posts in the Browser

现在你已经准备好在posts中工作了。导航至 http://localhost:3000，并且点击“My Blog”链接。

!images/posts_index.png(Posts Index screenshot)!

这就是Rails渲染你的posts视图后的结果。在你点击“New Post”链接并创建一个新的post之前，数据库里面是没有任何post的。随后你可以编辑，查看详细内容，或者删除他们。post的所有的logic和HTML都是通过 +rails generate scaffold+ 命令生成的。

TIP: 在开发模式中（你的默认工作模式），Rails会在每个浏览器请求的时候重新载入你的应用程序，因此你不需要停止或者重启web服务。

恭喜，你已经驯服了rails！现在是时候去看看它的所有工作了

h4. The Model

The model file, +app/models/post.rb+ is about as simple as it can get:

<ruby>
class Post < ActiveRecord::Base
end
</ruby>

这里有可能不一致——但是切记 +Post+ 类继承于+ActiveRecord::Base+。Active Record免费为你的models提供了强大的功能，包括基本数据库的CRUD（创建，读取，更新，删除）操作，数据验证，以及复杂的的查询与其它数据表单多关联的字段的支持能力。

h4. 添加一些验证

Rails包含一些帮助你验证发送到models的数据的方法。打开app/models/post.rb+并编辑：

<ruby>
class Post < ActiveRecord::Base
  validates :name,  :presence => true
  validates :title, :presence => true,
                    :length => { :minimum => 5 }
end
</ruby>

这些更改会确保所有的post都有一个name和titile并且title长度至少五个字符。Rails可以验证很多种字段，比如字段能否为空和独特性，字段的格式，以及字段的关联。验证详细描述在 "Active Record Validations and Callbacks":active_record_validations_callbacks.html#validations-overview

h4. 使用控制台

要想在action里面查看你的验证你可以使用console。console是一个可以让你在你的应用程序的上下文中执行Ruby代码的命令行工具：

<shell>
$ rails console
</shell>

TIP: 默认的console将会改变你的数据库。你可以通过运行<tt>rails console
--sandbox</tt>,这样你可以（在退出控制台后）回滚你的任何操作

在启动控制台后，你可以使用它来对你应用程序的models进行工作：

<shell>
>> p = Post.new(:content => "A new post")
=> #<Post id: nil, name: nil, title: nil,
     content: "A new post", created_at: nil,
     updated_at: nil>
>> p.save
=> false
>> p.errors.full_messages
=> ["Name can't be blank", "Title can't be blank", "Title is too short (minimum is 5 characters)"]
</shell>

这段代码演示了创建一个Post实例，并企图保存到数据库并得到一个 +false+ 的返回值（说明保存失败的原因），检查post的错误信息。

当你操作完成，输入 +exit+ 并回车退出 console。

TIP: 不像开发环境的 web 服务器 console 不会自动导入你每行输入的新的代码。如果你改变了你的 models 并且 console 是打开的，输入 +reload!+ 那么 console 会立即导入他们。

h4. Listing All Posts

Let's dive into the Rails code a little deeper to see how the application is
showing us the list of Posts.让我们深入 Rails 代码一点点，去看看程序是怎样展示 post 列表给我们的。打开文件 +app/controllers/posts_controller.rb+ 并且查看 +index+ action：

<ruby>
def index
  @posts = Post.all

  respond_to do |format|
    format.html  # index.html.erb
    format.json  { render :json => @posts }
  end
end
</ruby>

+Post.all+ 调用Post model并返回当前在数据库中的所有 post 为一个 +Post+ 记录的数组。并且我们将这个数组存储在一个叫做@posts的实例变量中。

TIP: 找有关Active Record更多的信息，可以查看 "Active
Record Query Interface":active_record_querying.html 相关记录。

这个 +respond_to+ 块处理了这个动作的HTML和JSON请求。如果你浏览 "http://localhost:3000/posts.json":http://localhost:3000/posts.json，你将会看到一个JSON包含着所有的post。这个HTML格式在+app/views/posts/+ 的view中查找相对应的动作名称。Rails使来自action的所有的（可用的）实例变量对应到view。

<erb>
<h1>Listing posts</h1>

<table>
  <tr>
    <th>Name</th>
    <th>Title</th>
    <th>Content</th>
    <th></th>
    <th></th>
    <th></th>
  </tr>

<% @posts.each do |post| %>
  <tr>
    <td><%= post.name %></td>
    <td><%= post.title %></td>
    <td><%= post.content %></td>
    <td><%= link_to 'Show', post %></td>
    <td><%= link_to 'Edit', edit_post_path(post) %></td>
    <td><%= link_to 'Destroy', post, :confirm => 'Are you sure?',
                                     :method => :delete %></td>
  </tr>
<% end %>
</table>

<br />

<%= link_to 'New post', new_post_path %>
</erb>

这个view迭代 +@posts+ 数组所有的内容并显示相关的内容和链接。关于视图备注一些信息：

* +link_to+ 创建一个超链接到一个地方
* +edit_post_path+ 和 +new_post_path+ 是Rails提供的 RESTful路由向导。你将会在不同 controller看到一系列的不同的actions helpers。

NOTE: 在以前的版本的Rails中，你必须使用 +&lt;%=h post.name %&gt;+ 以避免一些HTML可能会在插入到页面之前转义。在Rails 3.0，作为默认。得到一个非转义的HTML，你现在使用 <tt>&lt;%= raw post.name %&gt;</tt>。

TIP: 了解更过关于渲染处理流程，阅读 "Layouts and Rendering in
Rails":layouts_and_rendering.html.

h4. Customizing the Layout

view仅仅告诉HTML要显示什么（内容）在你的web浏览器里面。Rails也有关于 +layouts+ 的概念（定义），那就是（布局）是对view的包装。当Rails渲染一个view到浏览器，它通常是（这样做）把view的HTML放进布局的HTML中。在以前的版本中，+rails generate scaffold+ 命令将会自动创建controller对应指定的布局，就像 +app/views/layouts/posts.html.erb+ 对应于posts controller。 然而在rails3.0中有所不同了。一个应用程序指定的布局适用于所有的controllers，可以在 +app/views/layouts/application.html.erb+ 中找到(这就好像是django的base.html)。打开这个 layout 在你的编辑器中并且修改 +body+ 标签：

<pre><erb>
<!DOCTYPE html>
<html>
  <head>
    <title>Blog</title>
    <%= stylesheet_link_tag "application" %>
    <%= javascript_include_tag "application" %>
    <%= csrf_meta_tags %>
  </head>
  <body style="background-color: #EEEEEE;">
    <%= yield %>
  </body>
</html>
</erb></pre>


现在你刷新 +/posts+ 页面，你将会看到一个灰色的页面背景。并且相同的灰色背景将会使用在posts的所有视图中。

h4. Creating New Posts

创建一个new post 包含两个actions。首先是+new+ action，它会实例化一个空的 +Post+ 对象：

<ruby>
def new
  @post = Post.new

  respond_to do |format|
    format.html  # new.html.erb
    format.json  { render :json => @post }
  end
end
</ruby>

这个 +new.html.erb+ 视图显示这个空的post给用户：

<erb>
<h1>New post</h1>

<%= render 'form' %>

<%= link_to 'Back', posts_path %>
</erb>

+&lt;%= render 'form' %&gt;+ 是我们第一个介绍的Rails的partials。一个partial是一个HTML代码片段和Ruby代码的组合可以在多目标对象中重用。（类似于django的include 'other.html'）在本例中，form用于创建new post，它相当于一个用于编辑一个post的表单，这个表单有一个name text fields 和 title text fields 以及一个content的 text area还有一个用于添加一个新的post或者更新已经存在的post的按钮。

如果你看一下 +views/posts/_form.html.erb+ 这个文件，你将会发现下面的内容：

<erb>
<%= form_for(@post) do |f| %>
  <% if @post.errors.any? %>
  <div id="errorExplanation">
    <h2><%= pluralize(@post.errors.count, "error") %> prohibited
	    this post from being saved:</h2>
    <ul>
    <% @post.errors.full_messages.each do |msg| %>
      <li><%= msg %></li>
    <% end %>
    </ul>
  </div>
  <% end %>

  <div class="field">
    <%= f.label :name %><br />
    <%= f.text_field :name %>
  </div>
  <div class="field">
    <%= f.label :title %><br />
    <%= f.text_field :title %>
  </div>
  <div class="field">
    <%= f.label :content %><br />
    <%= f.text_area :content %>
  </div>
  <div class="actions">
    <%= f.submit %>
  </div>
<% end %>
</erb>

这个partial接收在view文件中定义的所有的实例变量。因此在本例中，controller申请新的Post对象给@post，@post在viewi和partial都是可用的。

有关partials的更多信息，参考 "Layouts and Rendering in
Rails":layouts_and_rendering.html#using-partials guide 指导。

+form_for+ 代码块用于创建一个HTML表单。在这个代码块中你可以在访问方法的基础上在表单上创建各种控制。比如，+f.text_field :name+ 告诉 Rails 在表单中创建一个text input 并且对应于显示实例的 +name+ 属性。form使用的方法基于model的相对应的字段属性（类型如text_field or text_area）（例如本例中的+name+, +title+, and +content+）。Rails 偏好于使用（偏向于使用）+form_for+ 列出你要输入的HTML行因为这样代码更加简洁，并且这样使得form和particular model实例关系更加明显。

+form_for+代码块同样也足够你定制你的 _New
Post_ 和 _Edit Post_ action,并且将会设置form +action+ 标签以及在HTML输出中显示的提交按钮的名称。

TIP: 如果你需要创建一个HTML表单显示任意的域，而不绑定到model字段中，你应该使用 +form_tag+ 方法，它快捷的保证了建立forms不必在绑定到一个model实例。

当用户点击这张表单上面的 +Create Post+ 按钮，浏览器将会发回信息到controller的 +create+ action（Rails知道调用 +create+ 方法，因为form是以HTTP POST请求发送，这是我随后提到的一种协议之一）：

<ruby>
def create
  @post = Post.new(params[:post])

  respond_to do |format|
    if @post.save
      format.html  { redirect_to(@post,
                    :notice => 'Post was successfully created.') }
      format.json  { render :json => @post,
                    :status => :created, :location => @post }
    else
      format.html  { render :action => "new" }
      format.json  { render :json => @post.errors,
                    :status => :unprocessable_entity }
    end
  end
end
</ruby>

+create+ action 实例化一个新的Post对象，这个对象给form提供数据支持，Rails 会生成有效的 +params+ hash。当成功的保存了新post，+create+ 返回用户请求的适当的格式（在本例中是HTML）。然后重定向用户页面到结果显示的post show action页面并且给出提示Post成功的创建了。

如果post没有保存成功，是因为（数据）验证错误，然后controller控制用户页面回到 +new+ action（包含验证错误新息）给用户，以便用户更改错误并重新提交。

 “Post was successfully created.” 这条消息被存储在Rails的flash的hash表中，（通常之叫它 _the flash_ ）因此消息可以转载到另一个action，在请求状态中提供有用的信息给用户。在这个新建例子（数据验证失败）中，用户实际上从来不看任何在页面创建进程中的渲染页面，因为它立刻重定向页面到new Post当Rails保存了这个记录。”Flash装载消息到接下来的action，因此当用户被重定向到了show action，他们立刻收到了一条消息“Post was successfully created.”。

h4. 显示一条 Post

当你在posts 的主页面点击一个 post 的 +show+ 这个超链接，他将会产生一个url +http://localhost:3000/posts/1+。Rails解释这是一个resource的+show+ action 调用。这里是 +show+ action：
<ruby>
def show
  @post = Post.find(params[:id])

  respond_to do |format|
    format.html  # show.html.erb
    format.json  { render :json => @post }
  end
end
</ruby>

这里的 +show+ action使用 +Post.find+ 通过对应记录的id来查找单个记录。当找到记录，Rails使用 +app/views/posts/show.html.erb+ 来显示它：

<erb>
<p id="notice"><%= notice %></p>

<p>
  <b>Name:</b>
  <%= @post.name %>
</p>

<p>
  <b>Title:</b>
  <%= @post.title %>
</p>

<p>
  <b>Content:</b>
  <%= @post.content %>
</p>


<%= link_to 'Edit', edit_post_path(@post) %> |
<%= link_to 'Back', posts_path %>
</erb>

h4. 编辑Posts

类似创建一个新的 post，编辑一个 post 分为两部分。首先是到 +edit_post_path(@post)+ 请求一个特定的post。这里是调用的在 controller 中的 +edit+ action：

<ruby>
def edit
  @post = Post.find(params[:id])
end
</ruby>

再找到了请求的post， Rails 试图使用 +edit.html.erb+ 来显示它：

<erb>
<h1>Editing post</h1>

<%= render 'form' %>

<%= link_to 'Show', @post %> |
<%= link_to 'Back', posts_path %>
</erb>

再一次的，就像 +new+ action，+edit+  action也使用 +form+ partial，这次有所不同，form将会提交一个PUT action到 +PostsController+ 并且提交按钮将会显示为 “Update Post”。

提交的form由上面这个视图创建的并且还会调用 controller 中的 +update+  action：

<ruby>
def update
  @post = Post.find(params[:id])

  respond_to do |format|
    if @post.update_attributes(params[:post])
      format.html  { redirect_to(@post,
                    :notice => 'Post was successfully updated.') }
      format.json  { head :no_content }
    else
      format.html  { render :action => "edit" }
      format.json  { render :json => @post.errors,
                    :status => :unprocessable_entity }
    end
  end
end
</ruby>

在 +update+ action中，Rails首先使用 +:id+ 参数从edit view（传值到）数据库记录下刚才编辑的内容。当获取了请求的+post+ parameter（一个hash字典）就会 call +update_attributes+ 并且 应用 hash 字典的值到相应的记录。如果一切成功，用户会被重定向到post的show视图。如果期间发生了任何错误，它将回到edit视图并（要求）改正他们。

h4. 摧毁一个post

最后，点击一个 +destroy+ 链接发送相关的id到 +destroy+ 动作：

<ruby>
def destroy
  @post = Post.find(params[:id])
  @post.destroy

  respond_to do |format|
    format.html { redirect_to posts_url }
    format.json { head :no_content }
  end
end
</ruby>

这个 +destroy+ 是Active Recordmodel的实例（功能是）从数据库中移除相应的记录。当这个（操作）完成，这里没有任何记录显示，因此Rails重定向用户的浏览器到model的index view。

h3. 添加第二个Model（comment）

你已经知道了通过scaffolding生成的model看起来是怎样的。第二个model用来处理blog post的评论。

h4. 构造一个model

Rails 中的 Models 使用一个单数名称，同时它们相关的数据库表使用一个复数名称。对于评论在 models 中的代名词，习惯上使用的的是 +Comment+。即使你不想完完全全的使用 scaffolding，大多数的 Rails 仍然使用生成器来做这些事情比如 models 和 controllers。要创建一个新的 model，在终端中运行下面这条命令：

<shell>
$ rails generate model Comment commenter:string body:text post:references
</shell>

这条命令将会生成四个文件：

|_.File                                       |_.Purpose|
|db/migrate/20100207235629_create_comments.rb | Migration to create the comments table in your database (your name will include a different timestamp) |
| app/models/comment.rb                       | The Comment model |
| test/unit/comment_test.rb                   | Unit testing harness for the comments model |
| test/fixtures/comments.yml                  | Sample comments for use in testing |

首先，看一看 +comment.rb+:

<ruby>
class Comment < ActiveRecord::Base
  belongs_to :post
end
</ruby>

这和你刚刚看到post.rb很近似。不同的是这行belongs_to :post，他会设定一个 Active Record association。你将会在接下来的guide学习一点有关associations的内容。

除了模型，Rails同样也产生了一个migration来创建相应的数据库表单：

<ruby>
class CreateComments < ActiveRecord::Migration
  def change
    create_table :comments do |t|
      t.string :commenter
      t.text :body
      t.references :post

      t.timestamps
    end

    add_index :comments, :post_id
  end
end
</ruby>

对于 +t.references+ 这行，会在两个models之间生成一个外键列从而形成一个关系（组合）。而且 +add_index+ line生成一个索引关联到这个关系行：

<shell>
$ rake db:migrate
</shell>

Rails 能够智能的只针对对没有被运行过的表单，执行 migrations 生成当前的数据库，因此这里你只会看到：

<shell>
==  CreateComments: migrating =================================================
-- create_table(:comments)
   -> 0.0008s
-- add_index(:comments, :post_id)
   -> 0.0003s
==  CreateComments: migrated (0.0012s) ========================================
</shell>

h4. Associating Models

Active Record associations让你很容易的申明两个models之间的关系。在本例中的comments和posts，你可以写出这样描述关系：

* 一条comment对应于一个post。
* 一个post可以对应于多个comments。

实际上，这与接近 Rails 声明的 这个关系的语句语义 。你已经看到了在 Comment model 中的使每个 comment对应于一个 post的代码。

<ruby>
class Comment < ActiveRecord::Base
  belongs_to :post
end
</ruby>

你将会需要编辑 +post.rb+ 文件来添加另一半关系。

<ruby>
class Post < ActiveRecord::Base
  validates :name,  :presence => true
  validates :title, :presence => true,
                    :length => { :minimum => 5 }

  has_many :comments
end
</ruby>

These two declarations enable a good bit of automatic behavior. For example, if
you have an instance variable +@post+ containing a post, you can retrieve all
the comments belonging to that post as an array using +@post.comments+.

TIP: 更多关于Active Record associations的信息查看 "Active Record
Associations":association_basics.html guide 。

h4. 给Comments添加路由

作为 +welcome+ controller，我们将还需要添加一个路由让Rails知道我们导航到哪里可以看到 +comments+。再次打开 config/routes.rb文件，你将会看到scaffold创建器在顶部为 +posts+ 自动添加的入口，<tt>resources
:posts</tt>，把它改成如下：

<ruby>
resources :posts do
  resources :comments
end
</ruby>

这里把 creates +comments+ 作为一个嵌套资源放在 +posts+ 中。这正是posts和comments的分层关系的表现。

TIP: 关于routing的更多的信息，查看 "Rails Routing from the Outside
In":routing.html guide。

h4. 构造一个Controller

Model 已经到手了，你可以把你的注意力放到创建一个匹配的 controller 上了。类似的，像这样构造：

<shell>
$ rails generate controller Comments
</shell>

这里新建了6个文件和一个空目录：

|_.File/Directory                             |_.Purpose                                 |
| app/controllers/comments_controller.rb      | The Comments controller                  |
| app/views/comments/                         | Views of the controller are stored here  |
| test/functional/comments_controller_test.rb | The functional tests for the controller  |
| app/helpers/comments_helper.rb              | A view helper file                       |
| test/unit/helpers/comments_helper_test.rb   | The unit tests for the helper            |
| app/assets/javascripts/comment.js.coffee    | CoffeeScript for the controller          |
| app/assets/stylesheets/comment.css.scss     | Cascading style sheet for the controller |

就像大多数blog，我们的读者将会直接发表他们的评论在他们阅读post的时候，并且一旦他们添加评论成功，将会回到postshow页面去查看他们刚刚列出的评论。正因为这样(的考虑)，我们的 CommentsController如下，它提供一个方法来创建comments和删除垃圾评论。

因此首先，我们来到Post show template(+/app/views/posts/show.html.erb+)，创建一个新的 comment：

<erb>
<p id="notice"><%= notice %></p>

<p>
  <b>Name:</b>
  <%= @post.name %>
</p>

<p>
  <b>Title:</b>
  <%= @post.title %>
</p>

<p>
  <b>Content:</b>
  <%= @post.content %>
</p>

<h2>Add a comment:</h2>
<%= form_for([@post, @post.comments.build]) do |f| %>
  <div class="field">
    <%= f.label :commenter %><br />
    <%= f.text_field :commenter %>
  </div>
  <div class="field">
    <%= f.label :body %><br />
    <%= f.text_area :body %>
  </div>
  <div class="actions">
    <%= f.submit %>
  </div>
<% end %>

<%= link_to 'Edit Post', edit_post_path(@post) %> |
<%= link_to 'Back to Posts', posts_path %> |
</erb>

This adds a form on the +Post+ show page that creates a new comment by
calling the +CommentsController+ +create+ action. Let's wire that up:
这里添加一个forms在Post show页面用来创建一个新的评论，它将会调用 +CommentsController+的 +create+ action，因此让我们补充上下面的内容：

<ruby>
class CommentsController < ApplicationController
  def create
    @post = Post.find(params[:post_id])
    @comment = @post.comments.create(params[:comment])
    redirect_to post_path(@post)
  end
end
</ruby>

这里你看到的会比你在controller中为posts做的要复杂点。那就是你刚刚你刚补充的副作用；每个面向comment的请求都保持了它所依附的post的踪迹(id)，因此这样初始化 +find+ 的时候匹配相应的 +Post+ model（时）得到了答案。

此外，上面的代码带来的好处就是使得一些对于association的方法可用。我们使用 +@post.comments+ 中的 +create+ 方法来新建和保存 comment。这里将会自动连接link使得comment依附于对应的post。

一旦我们评论过后，我们使用 +post_path(@post)+ 导引用户到先前的post。正如我们已经看到的，这里调用 +PostsController+ 的 +show+ action它将返回并渲染show.html.erb 模板。这里也是我们想让comment显示的地方，因此让我们添加（那些代码）到 +app/views/posts/show.html.erb+。

<erb>
<p id="notice"><%= notice %></p>

<p>
  <b>Name:</b>
  <%= @post.name %>
</p>

<p>
  <b>Title:</b>
  <%= @post.title %>
</p>

<p>
  <b>Content:</b>
  <%= @post.content %>
</p>

<h2>Comments</h2>
<% @post.comments.each do |comment| %>
  <p>
    <b>Commenter:</b>
    <%= comment.commenter %>
  </p>

  <p>
    <b>Comment:</b>
    <%= comment.body %>
  </p>
<% end %>

<h2>Add a comment:</h2>
<%= form_for([@post, @post.comments.build]) do |f| %>
  <div class="field">
    <%= f.label :commenter %><br />
    <%= f.text_field :commenter %>
  </div>
  <div class="field">
    <%= f.label :body %><br />
    <%= f.text_area :body %>
  </div>
  <div class="actions">
    <%= f.submit %>
  </div>
<% end %>

<br />

<%= link_to 'Edit Post', edit_post_path(@post) %> |
<%= link_to 'Back to Posts', posts_path %> |
</erb>

现在你可以添加posts和comments到你的blog同时随后他们会在相应的地方显示出来。

h3. 重构

现在我们已经有Posts和Comments开始工作了，如果我们注意一下+app/views/posts/show.html.erb+ 模板，发现它变得太长而且很别扭。我们可以使用partials来整理它。

h4. Rendering Partial Collections

首先我们会创建一个comment partial来专门显示post的所有的comments。创建文件 +app/views/comments/_comment.html.erb+ 并输入如下内容：

<erb>
<p>
  <b>Commenter:</b>
  <%= comment.commenter %>
</p>

<p>
  <b>Comment:</b>
  <%= comment.body %>
</p>
</erb>

然后在  +app/views/posts/show.html.erb+ 你可以相应的这样更改：

<erb>
<p id="notice"><%= notice %></p>

<p>
  <b>Name:</b>
  <%= @post.name %>
</p>

<p>
  <b>Title:</b>
  <%= @post.title %>
</p>

<p>
  <b>Content:</b>
  <%= @post.content %>
</p>

<h2>Comments</h2>
<%= render @post.comments %>

<h2>Add a comment:</h2>
<%= form_for([@post, @post.comments.build]) do |f| %>
  <div class="field">
    <%= f.label :commenter %><br />
    <%= f.text_field :commenter %>
  </div>
  <div class="field">
    <%= f.label :body %><br />
    <%= f.text_area :body %>
  </div>
  <div class="actions">
    <%= f.submit %>
  </div>
<% end %>

<br />

<%= link_to 'Edit Post', edit_post_path(@post) %> |
<%= link_to 'Back to Posts', posts_path %> |
</erb>

这里会把 +@post.comments+ 集合的每一个comment在+app/views/comments/_comment.html.erb+ 模板中渲染。当渲染方法迭代完 <tt>@post.comments</tt> 集合时候，它分配每个comment为与partial名相同的本地变量（这里为comment），通过这样在 partial 中的 +comment+ 就可以显示给我们的用户了。

h4. Rendering a Partial Form

同样让我们移动new comment部分到它自己的地方吧。类似的，创建一个文件 +app/views/comments/_form.html.erb+ 并且在里面放入下面代码：

<erb>
<%= form_for([@post, @post.comments.build]) do |f| %>
  <div class="field">
    <%= f.label :commenter %><br />
    <%= f.text_field :commenter %>
  </div>
  <div class="field">
    <%= f.label :body %><br />
    <%= f.text_area :body %>
  </div>
  <div class="actions">
    <%= f.submit %>
  </div>
<% end %>
</erb>

接着你这样修改 +app/views/posts/show.html.erb+ 文件：

<erb>
<p id="notice"><%= notice %></p>

<p>
  <b>Name:</b>
  <%= @post.name %>
</p>

<p>
  <b>Title:</b>
  <%= @post.title %>
</p>

<p>
  <b>Content:</b>
  <%= @post.content %>
</p>

<h2>Comments</h2>
<%= render @post.comments %>

<h2>Add a comment:</h2>
<%= render "comments/form" %>

<br />

<%= link_to 'Edit Post', edit_post_path(@post) %> |
<%= link_to 'Back to Posts', posts_path %> |
</erb>

第二个 render 仅仅定义了一个我们想渲染的 partial template <tt>comments/form</tt>，Rails 可以智能的识别字符串代表的含义，并且知道你是想 render <tt>_form.html.erb</tt>模板在目录 <tt>app/views/comments</tt> 中。

+@post+ 可以在任何的视图中partials rendered，因为我们把它定义成的实例变量。

h3. Deleting Comments

另一个重要的功能就是可以删除垃圾评论。要达到这样的效果，我们需要在view中实现某种链接和在 +CommentsController+ 中的 +DELETE+ 动作。

首先，在 +app/views/comments/_comment.html.erb+ partial中添加delete link：

<erb>
<p>
  <b>Commenter:</b>
  <%= comment.commenter %>
</p>

<p>
  <b>Comment:</b>
  <%= comment.body %>
</p>

<p>
  <%= link_to 'Destroy Comment', [comment.post, comment],
               :confirm => 'Are you sure?',
               :method => :delete %>
</p>
</erb>

点击“Destroy Comment”，link将会发送 <tt>DELETE
/posts/:id/comments/:id</tt> 到我们的 +CommentsController+，+CommentsController+将会利用刚刚收到的（消息）找到我们想删除哪条评论，因此让我们接着添加一个destroy action到我们的controller：

<ruby>
class CommentsController < ApplicationController

  def create
    @post = Post.find(params[:post_id])
    @comment = @post.comments.create(params[:comment])
    redirect_to post_path(@post)
  end

  def destroy
    @post = Post.find(params[:post_id])
    @comment = @post.comments.find(params[:id])
    @comment.destroy
    redirect_to post_path(@post)
  end

end
</ruby>

+destroy+ action将会找到那个我们正在阅读的post，并且定位comment在 <tt>@post.comments</tt> 集合，然后从数据库 remove 它，最后传回消息到post的show action。


h4. Deleting Associated Objects

如果你删除一个了post，那么与之相关联的comments也需要被删除。否则他们将会只是在数据库中占用空间（别无它用）。Rails允许你通过关系的依赖选项完成（上述功能）。修改Post model，+app/models/post.rb+，像这样：

<ruby>
class Post < ActiveRecord::Base
  validates :name,  :presence => true
  validates :title, :presence => true,
                    :length => { :minimum => 5 }
  has_many :comments, :dependent => :destroy
end
</ruby>

h3. Security

如果你就这样publish你的blog在互联网，任何人都可以添加，编辑和删除post或者删除comments。

Rails提供了一个非常简单的HTTP认证系统在这样的情况下会非常适合。

在 +PostsController+ 中我们需要一个方法来阻止没有通过认证的用户的操作，这里我们可以使用Rails的  <tt>http_basic_authenticate_with</tt> 这个方法，运行访问请求如果这个方法是允许的。

要使用这个认证系统，我们需要在PostsController 的顶部在指定（即引用）它，这样我们希望用户在进行每个action的时候都是通过授权的，除了index和show，因此我们这样写：

<ruby>
class PostsController < ApplicationController

  http_basic_authenticate_with :name => "dhh", :password => "secret", :except => [:index, :show]

  # GET /posts
  # GET /posts.json
  def index
    @posts = Post.all
    respond_to do |format|
# snipped for brevity
</ruby>

我们同样希望只有授权用户能够删除评论，因此在 +CommentsController+ 这样写：

<ruby>
class CommentsController < ApplicationController

  http_basic_authenticate_with :name => "dhh", :password => "secret", :only => :destroy

  def create
    @post = Post.find(params[:post_id])
# snipped for brevity
</ruby>

现在如果你尝试创建一个新的post，你将会迎来一个基于HTTP认证的挑战。

!images/challenge.png(Basic HTTP Authentication Challenge)!

h3. Building a Multi-Model Form

另一个功能来平衡你的blog是能够给posts添加tag。要想在你的程序中实现这个功能需要在一个form中与超过一个model互动。Rails提供了嵌套forms。

为了演示这个（功能），你将会在你创建post的form中添加post的多tag支持。首先创建一个new model来存放tags：

<shell>
$ rails generate model Tag name:string post:references
</shell>

再次运行migration来创建数据库表单：

<shell>
$ rake db:migrate
</shell>

接下来：编辑 +post.rb+ 文件来创建来创建另一个成员，并且告诉Rails（通过 the  +accepts_nested_attributes_for+ 宏）你打算通过posts form来编辑tags。

<ruby>
class Post < ActiveRecord::Base
  validates :name,  :presence => true
  validates :title, :presence => true,
                    :length => { :minimum => 5 }

  has_many :comments, :dependent => :destroy
  has_many :tags

  accepts_nested_attributes_for :tags, :allow_destroy => :true,
    :reject_if => proc { |attrs| attrs.all? { |k, v| v.blank? } }
end
</ruby>

对于 +:allow_destroy+ 嵌套属性的声明是告诉Rails显示一个“remove”复选框在视图中那样你可以快速创建（tags）。对于 +:reject_if+ 保证不保存没有任何内容的tags。

我们将要修改 +views/posts/_form.html.erb+ 来render（form的）一部分来创建tag：

<erb>
<% @post.tags.build %>
<%= form_for(@post) do |post_form| %>
  <% if @post.errors.any? %>
  <div id="errorExplanation">
    <h2><%= pluralize(@post.errors.count, "error") %> prohibited this post from being saved:</h2>
    <ul>
    <% @post.errors.full_messages.each do |msg| %>
      <li><%= msg %></li>
    <% end %>
    </ul>
  </div>
  <% end %>

  <div class="field">
    <%= post_form.label :name %><br />
    <%= post_form.text_field :name %>
  </div>
  <div class="field">
    <%= post_form.label :title %><br />
    <%= post_form.text_field :title %>
  </div>
  <div class="field">
    <%= post_form.label :content %><br />
    <%= post_form.text_area :content %>
  </div>
  <h2>Tags</h2>
  <%= render :partial => 'tags/form',
             :locals => {:form => post_form} %>
  <div class="actions">
    <%= post_form.submit %>
  </div>
<% end %>
</erb>

注意：我们已经更改 +form_for(@post) do |f|+ 中的 +f+ 为 +post_form+ 这样会更加容易明白是怎么回事。

这个例子在render helper中使用另个方式，是为了说明我们希望的是在 +form+ 中使用局部变量指向的 +post_form+ 对象。

我们还在form的顶部添加 <tt>@post.tags.build</tt>。这里是为了确保每个新的tag都被用户填上了name。如果你不创建新tag，form将不会显示它。

现在创建一个 <tt>app/views/tags</tt> 文件夹并且在里面新建一个 <tt>_form.html.erb</tt> 它包含tag form：

<erb>
<%= form.fields_for :tags do |tag_form| %>
  <div class="field">
    <%= tag_form.label :name, 'Tag:' %>
    <%= tag_form.text_field :name %>
  </div>
  <% unless tag_form.object.nil? || tag_form.object.new_record? %>
    <div class="field">
      <%= tag_form.label :_destroy, 'Remove:' %>
      <%= tag_form.check_box :_destroy %>
    </div>
  <% end %>
<% end %>
</erb>

最后编辑 <tt>app/views/posts/show.html.erb</tt> 模板显示我们的tags：

<erb>
<p id="notice"><%= notice %></p>

<p>
  <b>Name:</b>
  <%= @post.name %>
</p>

<p>
  <b>Title:</b>
  <%= @post.title %>
</p>

<p>
  <b>Content:</b>
  <%= @post.content %>
</p>

<p>
  <b>Tags:</b>
  <%= @post.tags.map { |t| t.name }.join(", ") %>
</p>

<h2>Comments</h2>
<%= render @post.comments %>

<h2>Add a comment:</h2>
<%= render "comments/form" %>


<%= link_to 'Edit Post', edit_post_path(@post) %> |
<%= link_to 'Back to Posts', posts_path %> |
</erb>

通过这写修改，你会发现你可以直接在post form中编辑tags。

另外， <tt>@post.tags.map { |t| t.name }.join(", ")</tt> 这个方法很别扭，我们可以通过编写一个helper method。

h3. View Helpers

View Helpers放置在 <tt>app/helpers</tt>，它提供了可重用的小代码片段给view。在本例，我们想要一个方法把（tag）放在一起（一个字符串中），并且使用逗号分割。要想这样在Post show模板，我们在PostHelper中写入：

现在你可以在 <tt>app/helpers/posts_helper.rb</tt> 中更改：

<erb>
module PostsHelper
  def join_tags(post)
    post.tags.map { |t| t.name }.join(", ")
  end
end
</erb>

Now you can edit the view in <tt>app/views/posts/show.html.erb</tt> to look like
this:

<erb>
<p id="notice"><%= notice %></p>

<p>
  <b>Name:</b>
  <%= @post.name %>
</p>

<p>
  <b>Title:</b>
  <%= @post.title %>
</p>

<p>
  <b>Content:</b>
  <%= @post.content %>
</p>

<p>
  <b>Tags:</b>
  <%= join_tags(@post) %>
</p>

<h2>Comments</h2>
<%= render @post.comments %>

<h2>Add a comment:</h2>
<%= render "comments/form" %>


<%= link_to 'Edit Post', edit_post_path(@post) %> |
<%= link_to 'Back to Posts', posts_path %> |
</erb>

h3. What's Next?

现在你已经看到了你的第一个Rails应用程序，你应该可以很轻松的继续更新它或者试验一下你的想法。当你在更新和运行Rails的时候需要援助，咨询下面推荐的资源会让你感到轻松：

* The "Ruby on Rails guides":index.html
* The "Ruby on Rails Tutorial":http://railstutorial.org/book
* The "Ruby on Rails mailing list":http://groups.google.com/group/rubyonrails-talk
* The "#rubyonrails":irc://irc.freenode.net/#rubyonrails channel on irc.freenode.net

Rails同样也带有内置的帮助你可以使用rake命令实用工具在你的应用程序中创建帮助文档：

* 运行 +rake doc:guides+ 将会输出所有Rails Guides的文档到你的应用程序中的 +doc/guides+ 中。在你的浏览器中打开/guides/index.html浏览Guides。
* 运行 +rake doc:rails+ 将会输出所有Rails API 的文档到你的应用程序中的 +doc/api+ 中。在你的浏览器中打开 +doc/api/index.html+ 浏览API documentation。

h3. Configuration Gotchas配置陷阱

The easiest way to work with Rails is to store all external data as UTF-8. If
you don't, Ruby libraries and Rails will often be able to convert your native
data into UTF-8, but this doesn't always work reliably, so you're better off
ensuring that all external data is UTF-8.
Rails使用Rails最简单的工作方式是存储所有的外部数据为 UTF-8编码。如果不那样做，Ruby libraries和Rails通才会转换你的自然数据成 UTF-8编码，但是这样不是很可靠，因此你最好保证所有的外部数据是 UTF-8编码。如果你在这里犯了错误，一般的症状就是在浏览器中出现钻石符号（可能是^）变成了问号。 另一个普遍症状是“ü”变成了 “Ã¼”。

If you have made a mistake in this area, the most common symptom is a black
diamond with a question mark inside appearing in the browser. Another common
symptom is characters like "Ã¼" appearing instead of "ü". Rails takes a number
of internal steps to mitigate common causes of these problems that can be
automatically detected and corrected. However, if you have external data that is
not stored as UTF-8, it can occasionally result in these kinds of issues that
cannot be automatically detected by Rails and corrected.

两种非常普遍的不是UTF-8 编码的源数据：
* Your text editor: Most text editors (such as Textmate), default to saving files as
  UTF-8. If your text editor does not, this can result in special characters that you
  enter in your templates (such as é) to appear as a diamond with a question mark inside
  in the browser. This also applies to your I18N translation files.
  Most editors that do not already default to UTF-8 (such as some versions of
  Dreamweaver) offer a way to change the default to UTF-8. Do so.
* Your database. Rails defaults to converting data from your database into UTF-8 at
  the boundary. However, if your database is not using UTF-8 internally, it may not
  be able to store all characters that your users enter. For instance, if your database
  is using Latin-1 internally, and your user enters a Russian, Hebrew, or Japanese
  character, the data will be lost forever once it enters the database. If possible,
  use UTF-8 as the internal storage of your database.