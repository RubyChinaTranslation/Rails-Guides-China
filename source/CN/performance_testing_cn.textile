h2. Rails 应用中的性能测试

这篇文章介绍了几种在 Ruby on Rails 应用中进行性能测试的方法。通过阅读这篇文章，你可以

* Understand the various types of benchmarking and profiling metrics
* 生成一个 benchmark 性能测试。 
* 安装使用 Ruby的扩展GC类库来测试你的内存使用和分配情况。 
* 通过 Rails 内置的日志功能来了解 benchmarking 信息。 
* Learn about various tools facilitating benchmarking and profiling

在开发中，性能测试是一个循序渐进的过程。让你的用户能够很快的完成加载并看到你的产品是非常重要的。确保用户在各类浏览器上的体验，降低硬件上不必要的消耗是每一个 web 程序都必须要做到的。

endprologue.

h3. 性能测试案例

Rails 性能测试是包括基准测试，夹具测试在内的一系列集成测试。用上了性能测试，你可以发现你的应用程序中存在的内存或者速度问题，对存在的问题进行更深入的检测。

在这里我们新建一个 Rails 应用程序， +test/performance/browsing_test.rb+ ，在这个文件里写入一个测试的例子：


<ruby>
require 'test_helper'
require 'rails/performance_test_help'

# Profiling results for each test method are written to tmp/performance.
class BrowsingTest < ActionDispatch::PerformanceTest
  def test_homepage
    get '/'
  end
end
</ruby>

这是一个简单的性能测试例子，它会为你生成一个 GET 请求的性能测试夹具(profiling).

h4. 生成一个性能测试

Rails 提供了一个 +performance_test+ 生成器来新建一个性能测试

<shell>
$ rails generate performance_test homepage
</shell>

这里生成的 +performance_test.rb+ 在    +test/performance+ 目录中：

<ruby>
require 'test_helper'
require 'rails/performance_test_help'

class HomepageTest < ActionDispatch::PerformanceTest
  # Replace this with your real tests.
  def test_homepage
    get '/'
  end
end
</ruby>

h4. 例子

现在假设你的应用程序有这些 controller 和 model ：


<ruby>
# routes.rb
root :to => 'home#index'
resources :posts

# home_controller.rb
class HomeController < ApplicationController
  def dashboard
    @users = User.last_ten.includes(:avatars)
    @posts = Post.all_today
  end
end

# posts_controller.rb
class PostsController < ApplicationController
  def create
    @post = Post.create(params[:post])
    redirect_to(@post)
  end
end

# post.rb
class Post < ActiveRecord::Base
  before_save :recalculate_costly_stats

  def slow_method
    # I fire gallzilion queries sleeping all around
  end

  private

  def recalculate_costly_stats
    # CPU heavy calculations
  end
end
</ruby>

h5. 控制器测试范例

因为性能测试本质上是一种特殊的集成测试（integration test） ，你可以在测试中使用  +get+ 和 +post+ 方法。

下面分别是  +HomeController#dashboard+ 和 +PostsController#create+ 的测试:


<ruby>
require 'test_helper'
require 'rails/performance_test_help'

class PostPerformanceTest < ActionDispatch::PerformanceTest
  def setup
    # Application requires logged-in user
    login_as(:lifo)
  end

  def test_homepage
    get '/dashboard'
  end

  def test_creating_new_post
    post '/posts', :post => { :body => 'lifo is fooling you' }
  end
end
</ruby>

你可以在"Testing Rails Applications":testing.html这篇文章中找到  +get+ 和 +post+ 的更多细节。 

h4. 模式

性能测试可以运行于两种测试中： 基准模式 （Benchmarking）和 夹具模式(Profiling)

h5. 基准模式

基准测试能让我们迅速获取每个测试运行的数据。默认情况下，每一个测试都会在基准模式下运行 *四 次*。

你可以这样来启动一个 基准测试。

<shell>
$ rake test:benchmark
</shell>

h5. 夹具测试

夹具（Profiling）能让你借助一个模具（profiler）更深入的分析你的每一个测试，根据你的Ruby解释器，这个测试模具可能会是本地的（ruby ， JRuby的话）或者不是远程的（MRI，用在了 RubyProf上）。默认情况下，每一个测试用例会在夹具模式下被运行一次。

我们可以这样运行一个 夹具测试：


<shell>
$ rake test:profile
</shell>

h4. 数据（Metrics）

夹具测试和性能测试会得到几组数据，每个数据的产生都取决于计算机的硬件，模式，解释器的使用————这意味着你需要综合的看待他们。应该尽量对每一组数据都做出一个简短描述并记录下当前运行的环境。

h5. 真实时间（Wall Time）

Wall Time 记录了你在跑测试的时候花了多少时间，这个时间会被计算机系统上的其他进程影响。

h5. 处理时间（Process Time）

Process Time 记录了 CPU 花在单个进程上的时间，这个数据并不会被同系统上的其他进程所影响。也正是因此，Process Time 通常对于同一个性能测试来说会是一个常数————如果忽略机器的载入时间的话。


h5. CPU时间（CPU Time）

与 process time 相似, 但是 CPU Time 运用了 更加精准的 CPU 时钟计数器，该功能只在奔腾和PowerPC平台上有效.

h5. 用户时间（User Time）

User Time 计算了CPU花在 用户态下的时间总和。它不会被其他处理器所影响，但是可能会被 “阻止”（blocked）的状态影响。  

TIP： 译者注： "用户态"http://zh.wikipedia.org/wiki/%E7%94%A8%E6%88%B7%E6%80%81（user mode）在计算机结构指两项类似的概念。在CPU的设计中，用户态指非特权状态。在此状态下，执行的代码被硬件限定，不能进行某些操作，比如写入其他进程的存储空间，以防止给操作系统带来安全隐患。在操作系统的设计中，用户态也类似，指非特权的执行状态。内核禁止此状态下的代码进行潜在危险的操作，比如写入系统配置文件、杀掉其他用户的进程、重启系统等。

h5. 内存

计算在性能测试用例中所占用的内存

h5. 对象

对象（Objects）计算了性能测试中被分配了的对象总数。

h5. GC 状态

GC 状态 （GC Runs）计算了在性能测试中GC被调用的次数

h5. GC 时间

GC Time 计算了在性能测试GC所花费的总时间。

h5. 数据失礼

h6. 基准测试


|_.Interpreter|_.Wall Time|_.Process Time|_.CPU Time|_.User Time|_.Memory|_.Objects|_.GC Runs|_.GC Time|
|_.MRI        | yes       | yes          | yes      | no        | yes    | yes     | yes     | yes     |
|_.REE        | yes       | yes          | yes      | no        | yes    | yes     | yes     | yes     |
|_.Rubinius   | yes       | no           | no       | no        | yes    | yes     | yes     | yes     |
|_.JRuby      | yes       | no           | no       | yes       | yes    | yes     | yes     | yes     |

h6. 夹具

|_.Interpreter|_.Wall Time|_.Process Time|_.CPU Time|_.User Time|_.Memory|_.Objects|_.GC Runs|_.GC Time|
|_.MRI        | yes       | yes          | no       | no        | yes    | yes     | yes     | yes     |
|_.REE        | yes       | yes          | no       | no        | yes    | yes     | yes     | yes     |
|_.Rubinius   | yes       | no           | no       | no        | no     | no      | no      | no      |
|_.JRuby      | yes       | no           | no       | no        | no     | no      | no      | no      |

NOTE: 要在JRuby下面运行这个测试你可能需要在运行测试前运行 +export JRUBY_OPTS="-Xlaunch.inproc=false --profile.api" .

h4. 输出

性能测试会根据你的模式在+tmp/performance+文件夹里面输出几个不同的测试结果。

h5. 基准测试

在基准模式中，性能测试会产生两种输出。

h6. 命令行

这是一个基准测试所产生输出示例：

<shell>
BrowsingTest#test_homepage (31 ms warmup)
           wall_time: 6 ms
              memory: 437.27 KB
             objects: 5,514
             gc_runs: 0
             gc_time: 19 ms
</shell>

h6. CSV 文件

性能测试的输出结果同样可以输出到 +tmp/performance+ 下面的 +.csv+ 文件。举例来说，运行+BrowsingTest#test_homepage+ 将会生成以下5个文件：

* BrowsingTest#test_homepage_gc_runs.csv
* BrowsingTest#test_homepage_gc_time.csv
* BrowsingTest#test_homepage_memory.csv
* BrowsingTest#test_homepage_objects.csv
* BrowsingTest#test_homepage_wall_time.csv



