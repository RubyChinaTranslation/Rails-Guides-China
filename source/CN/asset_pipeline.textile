h2. Asset Pipeline

这个指南涵盖了在 Rails 3.1 引进的 asset pipling.
通过浏览这个指南，你将能：

* 理解 asset pipeline 是什么和它是做什么的
* 合理的组织应用程序的资源
* 了解 asset pipeline 的优点
* 为 pipeline 添加预处理器
* 用一个 gem 打包资源

endprologue.

h3. 什么是 Asset Pipeline?

asset pipeline 是一个提供连结缩小或者压缩 JavaScript 和 CSS 资源的框架。它也添加了用其它语言编写这些资源的功能, 如 CoffeeScript, Sass 和 ERB。

在 Rails 3.1 之前这些功能都是通过第三方 Ruby 库添加进来的，如 Jammit 和 Sprockets. Rails 3.1 默认通过 Action Pack 和 依赖 +sprockets+ gem 的 Sprockets 进行交互.

使 asset pipeline 成为 Rails 的核心功能意味着所有的开发者都能从其强大的功能受益. 这些功能使用一个中心库，Sprockets, 将资源预处理，压缩和缩小。 这是 Rails 的 "fast by default" 策略的一部分，这个策略是 DHH 在 RailsConf 2011 概述中的主旨。

在 Rails 3.1 中，asset pipeline 是默认开启的。它可在 +config/application.rb+ 里被关闭，只需将以下这行放到应用程序类定义里:

<ruby>
config.assets.enabled = false
</ruby>

你也可以在创建一个新应用程序的时候投递 <tt>--skip-sprockets</tt> 参数来关闭 asset pipeline.

<plain>
rails new appname --skip-sprockets
</plain>

你应该在所有的新应用程序中默认使用它，除非你有特殊的原因去避免使用 asset pipeline.

h4. 主要功能

pipeline 的第一个功能就是连结资源。这在生产环境非常重要，因为它可以避免浏览器为了渲染页面而不得不发送过多的请求。网页浏览器限制了并行请求的数量， 所以更少的请求能让你的应用程序加载更快。

Rails 2.x 介绍了将 +:cache => true+ 放置到 +javascript_include_tag+ 或 +stylesheet_link_tag+ 方法的尾部能连结 JavaScript 或 CSS 资源。但这个技术有些不足。例如，它不能预先产生缓存和它不能显式调用由第三方库提供的资源。

从 3.1 版开始， Rails 默认将所有的 JavaScript 文件连结成一个主要的 +.js+ 文件，和将所有的 CSS 文件连结成一个主要的 +.css+ 文件。 你将可以在本指南后面学习到如何自定义管理这些文件的策略。在生产环境中， Rails 给每个文件名插入一个 MD5 指纹,以便文件被网页浏览器缓存。你可以通过修改指纹使缓存无效，这在你修改文件后会自动发生。

asset pipeline 的第二个功能是资源的缩小或者压缩。对于 CSS 文件，是通过去除空格和注释来实现的。对于 JavsScript, 会有更多的复杂过程。你可以从选项中选择一套构件或者指定你自己的。

asset pipeline 的第三个功能是它能你使用更高级的语言来编写资源，然后预编译成实质的资源。默认支持的语言包括 CSS 的 Sass，JavaScript 的 CoffeeScript 和可用于所有资源的 ERB.

h4. 什么是指纹识别和为什么我们要关心

指纹识别是一项使一个文件的名字根据文件的内容而定的技术。当文件的内容改变了，文件名也会变。 这提供了辨别两个版本的文件是同一个文件的方法，即使是跨越不同的服务器和部署日期。

当一个文件的名字是唯一的并且基于它的内容， HTTP 头部可以被设定为在任何地方缓存(无论是在 CDNs, 在 ISPs, 在网络设备里，或者是在网页浏览器里)去保存它们自己内容的副本。当内容更新了，指纹识别也会变更。这会引起远端客户端发出一个新的请求获得内容。这一般被叫做 _清除缓存_.

Rails 用于指纹识别的技术是将内容的 hash 插入到名字里，通常在尾部。例如 +global.css+ CSS文件可以被重命名为一个带有它的内容的 MD5 digest:

<plain>
global-908e25f4bf641868d8683022a5b62f54.css
</plain>

这是 Rails asset pipeline 所使用的策略。

Rails 的旧策略是为每个资源附加一个以日期为基础的查询字符串，这些 asset 都会与一个内建的 helper 关联. 原先文件生成的代码看起来像这样:

<plain>
/stylesheets/global.css?1309495796
</plain>

这个查询字符串策略有这些弊端:

<ol>
  <li>
    <strong>当文件名只是查询参数部分的不同，不是所有的缓存都会确实地缓存了内容</strong>.<br>
    "Steve Souders recommends":http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/, "...避免对可缓存资源使用查询字符串"。它发现在这种情况下有 5-20% 的请求都不会被缓存。特别是针对一些CDNs的独立缓存，查询字符串起不到太大的作用。
  </li>
  <li>
    <strong>在多服务器环境中，文件名可以在不同的节点之间改变。</strong><br>
    Rails 2.x 默认的查询字符基于文件的修改时间。当资源被部署到某个集群，不能确定时间戳会是一样的。这会导致随着处理请求的服务器的不同而使用不同的值。
  </li>
  <li>
    <strong>过多的独立缓存</strong><br/>
    每当静态资源随着新版本的代码部署时，_所有_这些文件的 mtime 都会改变，迫使所有的远程客户端重新刷新它们，即使这些资源的内容没有发生改变。
  </li>
</ol>

指纹识别没有使用查询字符串而且确保了文件名与其内容保持同步，所以解决了这些问题。

指纹识别在生产环境下是默认开启的，而在所有其它的环境下是关闭的。你可以通过配置文件的 +config.assets.digest+ 选参去开启或者关闭它。

更多读物:

* "Optimize caching":http://code.google.com/speed/page-speed/docs/caching.html
* "Revving Filenames: don’t use querystring":http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/

h3. 如何使用 Asset Pipeline

在 Rails 之前的版本里，所有的资源都放置在 +public+ 的子目录下比如 +images+, +javascript+ 和 +stylesheets+. 对于 asset pipeline, 这些资源现在被指定到 +app/assets+ 目录。这个目录下的所有文件都通过 Sprockets 中间件供应，这个中间件通过引入 sprockets gem 使用。

资源依然可以被放置在 +public+ 目录下。 所有位于 +public+ 目录下的文件都会作为静态资源通过应用程序或者 web 服务器供应。在它们被供应之前必须作一些预处理的文件要放在 +app/assets+ 里。

在生产中，Rails 默认预编译这些文件到 +public/assets+。 预编译过后的副本会被 web 服务器作为静态资源供应。在生产中，+app/assets+ 里的文件从不被直接供应。

当你创建一个 scaffold 或者一个控制器时，Rails 也会为该控制器创建一个 JavaScript 文件 (或者 CoffeeScript 文件，如果 +Gemfile+ 里有 +coffee-rails+ gem 的话) 和一个层叠式样式表文件 (或者 SCSS 文件，如果 +Gemfile+ 里有 +sass-rails+的话)

例如，如果你生成一个 +ProjectsController+, Rails 会同时添加一个新文件位于 +app/assets/javascripts/projects.js.coffee+ 和另一个位于 +app/assets/stylesheets/projects.css.scss+。你应该将针对某个控制器的 Javascript 和 CSS 放置到它们各自的资源文件里，以便这些文件可以只为这些控制器被加载, 使用诸如 +<%= javascript_include_tag params[:controller] %>+ 或者 +<%= stylesheet_link_tag params[:controller] %>+ 进行加载.

NOTE: 为了使用 CoffeeScript， 你必须有一个 "ExecJS":https://github.com/sstephenson/execjs#readme 支持的运行时。如果你使用 Mac OS X 或者 Windows，那你的操作系统已经安装好一个 Javascript 运行时了。 查阅 "ExecJS":https://github.com/sstephenson/execjs#readme 文档了解更多支持的 JavaScript 运行时。

h4. 资源组织

Pipeline assets 可以被放置到一个应用程序中这三个位置中的一个: +app/assets+, +lib/assets+ 或者 +vendor/assets+.

+app/assets+ 放置属于应用程序的资源，比如自选图像，JavaScript 文件和样式文件。

+lib/assets+ 用于不在应用程序范围内的自有函式库，或者那些跨应用程序共通的函式。

+vendor/assets+ 用于属于外部实体的资源，比如 JavaScript 插件和 CSS 框架的代码。

h5. 搜寻路径

当一个文件在资源清单或者 helper 中被指引，Sprockets 会在三个不同的资源地址去搜寻它.

默认的位置是: +app/assets/images+ 和那三个资源地址下的所有 +javascripts+， +stylesheets+ 子目录。

例如，这三个文件:

<plain>
app/assets/javascripts/home.js
lib/assets/javascripts/moovinator.js
vendor/assets/javascripts/slider.js
</plain>

会在资源清单里被指引如下:

<plain>
//= require home
//= require moovinator
//= require slider
</plain>

子目录下的资源同样也可以被访问。

<plain>
app/assets/javascripts/sub/something.js
</plain>

会像这样被指引:

<plain>
//= require sub/something
</plain>

你可以在 Rails console 里检阅 +Rails.application.config.assets.paths+，就可以看到那些搜寻路径了。

附加的(完全有资格的)路径可以在 +config/application.rb+ 里被添加到 pipeline。例如:

<ruby>
config.assets.paths << Rails.root.join("app", "assets", "flash")
</ruby>

路径会按找在搜寻路径中出现的顺序被历遍。

有一点非常重要要注意的是，你想在资源清单外引用的文件必须加载到预编译列表里，否则它们在生产环境将不可以用。

h5. 使用索引文件

Sprockets 对一些特殊的用途会使用名为 +index+ (使用相关扩展) 的文件。

例如，如果你的许多模块都要使用某个 jQuery 函式库，这个函式库存放在 +lib/assets/library_name+。 +lib/assets/library_name/index.js+ 会作为这个库的所有文件的 manifest. 这个文件可以按顺序包含一组需要使用的文件，或者一个简单的 <tt>require_tree</tt> 指令。

这个函式库可以作为一个整体被网站应用程序的资源清单像这样访问：

<plain>
//= require library_name
</plain>

通过让相关的代码在被其它地方引用之前组织起来，简化了组织结构而且保持事务清晰。

h4. 连接资源的代码。

Sprockets 不添加任何新方法去访问你的资源 - 你依旧使用熟悉的 +javascript_include_tag+ 和 +stylesheet_link_tag+.

<erb>
<%= stylesheet_link_tag "application" %>
<%= javascript_include_tag "application" %>
</erb>

在一般的视图里，你可以这样访问 +assets/images+ 目录下的图片：

<erb>
<%= image_tag "rails.png" %>
</erb>

这在你的应用程序使用了 pipeline (并且在当前的环境上下文中没有被关闭)时才会提供，这些文件通过 Sprockets 获得。 如果文件位于 +public/assets/rails.png+ 那么它将通过 web 服务器获得。

另一种情况是，请求一个带有 MD5 哈希值的文件如 +public/assets/rails-af27b6a414e6da00003503148be9b409.png+ 会被同样对待。 在本指南后续的 "In Production":#in-production 章节会介绍这些哈希值是如何生成的。

Sprockets 也会搜寻在 +config.assets.paths+ 指定的所有路径，这些路径包括常规的应用程序路径和任何被 Rails engines 添加进来的路径。

如果需要，图片也可以被组织到子目录里，然后在标签中通过指定目录名来访问它们:

<erb>
<%= image_tag "icons/rails.png" %>
</erb>

h5. CSS 和 ERB

asset pipeline 会自动解析 ERB. 这意味着如果你添加 +erb+ 扩展名到一个 CSS 资源 (例如， +application.css.erb+), 那么 helpers 如 +asset_path+ 就可以在你的 CSS 规则中使用:

<plain>
.class { background-image: url(<%= asset_path 'image.png' %>) }
</plain>

这会写入被指定的资源的路径。在这个例子中，它可从任何一个资源加载路径里获得一个图像，比如 +app/assets/images/image.png+. 这个图像会在这被引用。如果这个图像已经是一个指纹识别过的文件存在于 +public/assets+中的话，会优先引用这个路径。

#FXIME: as a fingerprinted file.
如果你想使用 "data URI":http://en.wikipedia.org/wiki/Data_URI_scheme -- 一个直接将图像数据嵌入到 CSS 文件里的方法 -- 你可以使用 +asset_data_uri+ helper.

<plain>
#logo { background: url(<%= asset_data_uri 'logo.png' %>) }
</plain>

这会嵌入一个格式正确的 data URI 到 CSS 源文件里

注意，闭合标签不能使用 +-%>+ 的形式。

h5. CSS 和 Sass

当我们使用 asset pipeline时， 资源的路径必须重写而且 +sass-rails+ 为下列类别提供了 +-url+ 和 +-path+ helpers(在 Sass 中使用连字符，在 Ruby 中使用下划线) : image, font, video, audio, JavaScript 和 stylesheet.

* +image-url("rails.png")+ 变成 +url(/assets/rails.png)+
* +image-path("rails.png")+ 变成 +"/assets/rails.png"+.

有更多类似的方式可以使用，但资源的路径和类别都必须指明：

* +asset-url("rails.png", image)+ 变成 +url(/assets/rails.png)+
* +asset-path("rails.png", image)+ 变成 +"/assets/rails.png"+

h5. JavaScript/CoffeeScript 和 ERB

如果你给 JavaScript 资源添加 +erb+ 后缀名，使它像 +application.js.erb+，那么你就可以在 JavaScript 代码里用 +asset_path+ helper 了。

<erb>
$('#logo').attr({
  src: "<%= asset_path('logo.png') %>"
});
</erb>

这将被引用的某个特定资源的路径写入。

同样的， 你可以在带有 +erb+ 扩展名的 CoffeeScript 文件 (e.g., +application.js.coffee.erb+) 中使用 +asset_path+ helper:

<plain>
$('#logo').attr src: "<%= asset_path('logo.png') %>"
</plain>

h4. 资源清单文件和指令

Sprockets 使用资源清单文件去确认哪些资源要引入并供应的。 这些资源清单文件包含一些 _指令_ -- 告诉 Sprockets 哪些文件要被按顺序引入，然后将它们连结成单个 CSS 或者 JavaScript 文件的指示。根据这些指令， Sprockets 加载这些被指定的文件，如果有必要就对它们进行加工，接着将它们连结成单个文件然后压缩它们 ( 如果 +Rails.application.config.assets.compress 为 true ). 由于只处理单个文件而不是多个， 浏览器可以发起更少的请求所以页面的加载时间将会大大的缩减。

例如，一个新的 Rails 应用程序包含了一个默认的 +app/assets/javascripts/application.js+ 文件，这个文件包含了一些行:

<plain>
// ...
//= require jquery
//= require jquery_ujs
//= require_tree .
</plain>

在 JavaScript 文件里，指令以 +//=+ 开头。在这个例子里， 该文件使用了 +require+ 和 +require_tree+ 指令。 +require+ 指令是用于告诉 Sprockets 需要加入的文件。这里，你加入了 +jquery.js+ 和 +jquery_ujs.js+ 文件，Sprockets 可以在搜索路径的某个地方找到。 你不需要显式的提供扩展名。当在一个 +.js+ 文件里时，Sprockets 会假设你加入的是一个 +.js+ 文件。

NOTE. 在 Rails 3.1 里， +jquery-rails+ gem 通过 asset pipeline 提供了 +jquery.js+ 和 +jquery_ujs.js+ 文件. 你会在应用程序的目录中看到它们。

+require_tree+ 指令告诉 Sprockets 递归地去包含在指定目录下_所有_ 的 JavaScript 文件到输出里。 这些路径必须在资源清单文件中有相关的指定。 有也可以使用 +require_directory+ 指令，它会将在某个特定目录下所有的 JavaScript 文件包含进去，但不递归。

指令会从上到下进行处理， 但是通过 +require_tree+ 包含进来的文件的顺序就没有规定。你不应该在它们中安排顺序。如果你想在连结起来的文件中确保某个 JavaScript 文件内容在其它之前结束， 先将首要的文件填入资源清单。 注意 +require+ 指令集会防止文件被重复包含到输出里。

Rails 也会创建一个默认的 +app/assets/stylesheets/application.css+ 文件，包含以下内容：

<plain>
/* ...
*= require_self
*= require_tree .
*/
</plain>

在 JavaScript 文件里可用的指令也可用于 stylesheets (当然是包含 stylesheets 文件而不是 JavaScript 文件). +require_tree+ 指令在 CSS资源清单中的用法和在 JavaScript 的用法是一样的，就是加入当前目录下的所有 stylesheets 文件。

在这个例子中使用了 +require_self+。 这将文件中的 CSS (如果有) 放置到 +require_self+ 调用的准确位置。如果 =require_self+ 被调用超过一次，只有最后一次调用有效。

NOTE. 如果你像使用多个 Sass 文件，你通常可以使用 "Sass +@import+ rule":http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#import 替代这些 Sprockets 指令。使用 Sprockets 指令的话，所有在 Sass 文件中定义的变量和 mixins 都只能在其被定义的文档中可用.(译者注: 虽然连结成同一个文件，但定义的变量等是相对独立的。而用 +@import+ 的话则可以在所有关联的 Sass 文件中通用.)

你可以有和你需要的一样多的资源清单文件。例如 +admin.css+ 和 +admin.js+资源清单可以包括被用于应用程序管理部分的 JS 和 CSS 文件.

排序方式和前面提到的一样。特殊情况下， 你可以指定独立的文件然后它们就会被按照指定的顺序编译。例如，你会通过这个方法连结三个 CSS 文件：

<plain>
/* ...
*= require reset
*= require layout
*= require chrome
*/
</plain>

h4. 预处理

文件的扩展名被用于判断某个资源文件要进入哪个预处理过程。当一个控制器或者一个 scaffold 是由 Rails 默认的 gemset 生成时， CoffeeScript 文件和 SCSS 文件会代替常规的 JavaScript 和 CSS 文件被生成。 前面的使用过例子的控制器为 "projects"，则它会生成一个 +app/assets/javascripts/projects.js.coffee+ 和一个 +app/assets/stylesheets/project.css.scss+ 文件。

当这些文件被请求时，它们会分别被 +coffee-script+ 和 +sass+ gem 提供的处理器处理，然后编译好的 JavaScript 和 CSS 文件送回给浏览。

其它层的预处理可以通过添加其它的扩展被加入，扩展的处理顺序按是从右到左。这应该用于需要按顺序处理的过程。例如，一个名为 +app/assets/stylesheets/project.css.scss.erb+ 的式样文件是被当作 ERB 处理，然后是 SCSS，最后为 CSS。对应用到 JavaScript 文件也是同样的 -- +app/assets/javascript/projects.js.coffee.erb+ 显示作为 ERB, 然后是 CoffeScript, 接着就是 JavaScript了。

谨记这些处理器的顺序是很重要的。例如，如果调用你的 JavaScript 文件 +app/assets/javascripts/projects.js.erb.coffee+， 那么现由 CoffeeScript 拦截器先处理。它不能解析 ERB 所以你会碰到问题。

h3. 在开发中

在开发环境中，资源文件按照在资源清单文件中的指定顺序以单独文件方式被供应。

这个资源清单+app/assets/javascript/application.js+：

<plain>
//= require core
//= require projects
//= require tickets
</plain>

会生成如下 HTML:

<html>
<script src="/assets/core.js?body=1"></script>
<script src="/assets/projects.js?body=1"></script>
<script src="/assets/tickets.js?body=1"></script>
</html>

Sprockets 需要 +body+ 参数.

h4. 关闭调试

你可以通过如下更新 +config/enviorments/development.rb+文件以关闭调式模式:

<ruby>
config.assets.debug = false
</ruby>

当调试模式关闭后，Sprockets 对所有的文件进行必要的预处理和连结。随着调试模式的关闭，相对与上面 manifest会生成:

<html>
<script src="/assets/application.js"></script>
</html>

在服务器启动后，资源在第一次请求时被编译并缓存。Sprockets 设置 +must-revalidate+ Cache-Control 的 HTTP 头部去防止在后续的请求开销 -- 浏览器会获得一个 304 (Not Modified) 的回应。

如果在各请求之间，任何在资源清单里的文件发生了变更，服务器会返回一个重新编译的文件。

调试模式也可以通过 Rails 的 helper 方法开启：

<erb>
<%= stylesheet_link_tag "application", :debug => true %>
<%= javascript_include_tag "application", :debug => true %>
</erb>

如果调试模式已经开启，+:debug+ 选项则是多余的。

你可能会在开发模式中开启压缩以作一个完整性检查，或者可以在需要调试时按需关闭。

h3. 在生产中

在生产环境中，Rails 使用上面提到过的指纹识别方案。默认情况下，Rails 认为资源已经预编译过并且将会由 web 服务器以静态资源供应。

在预编译阶段，MD5 是从已编译的内容生成的，然后在文件写入到磁盘时插入到文件名中。这些指纹识别过的名字都被用于 Rails helpers 替代资源清单的名字。

例如这个:

<erb>
<%= javascript_include_tag "application" %>
<%= stylesheet_link_tag "application" %>
</erb>

生成像这样的东西：

<html>
<script src="/assets/application-908e25f4bf641868d8683022a5b62f54.js"></script>
<link href="/assets/application-4dd5b109ee3439da54f5bdfd78a80473.css" media="screen" rel="stylesheet" />
</html>

这个指纹识别动作是由 Rails 的 +config.assets.digest+ 设置控制的 (默认除了在生产环境中为 +true+ 外，其它环境都为 +false+).

NOTE: 一般情况下默认选项不应该被改变。如果文件名里没有摘要(译者注:digests)，而且 far-futrue 头部也没有设置的话，远程客户端永远都不会在它们的内容变更时去刷新它们。

h4. 预编译资源

Rails 本身绑定了一个 rake 任何去编译资源资源清单和 pipeline 中的其它文件到磁盘里。

编译后的资源都被写入到了在 +config.assets.prefix+ 指定的位置里。默认情况下，是 +pulibc/assets+ 目录。

在开发期间你可以在服务器调用这个任务以直接在服务器上生成已编译版本的资源文件。 如果你对生产环境的文件系统没有写入权限， 你可以在本地调用这个任务然后部署编译好的资源。

这个 rake 任何是:

<plain>
bundle exec rake assets:precompile
</plain>

为了更快速的预编译资源，你可以在 +config/application.rb+ 里将 +config.assets.initialize_on_precompile+ 设置为 +false+ 去部分加载你的应用程序。虽然这么做模板会看不到应用程序对象和方法。 *Heroku 要求这个为 false.*

WARNING: 如果你设置 +config.assets.initialize_on_precomile+ 为 false, 在部署之前确保在本地测试 +rake assets:precompile+. 这应该会因为你的资源引用了应用程序对象或者方法而报错, 因为在开发模式范围内会忽略这个标记的值. 改变这个标记也会影响到 engines. Engines 也可以指定预编译资源. 因为完整的环境还没有加载完, engines (或者其他的 gems) 将不会被加载, 这会引起资源丢失.

Capistrano (v2.8.0 或以上) 包含了一个处理这个情况的方法. 把下面这行加到 +Capfile+:

<erb>
load 'deploy/assets'
</erb>

这把在 +config.assets.prefix+ 里指定的目录链接到 +shared/assets+. 如果你已经使用了这个共享文件夹, 那你就需要自己写一个部署任务了.

这个目录在各部署之间共享是很重要的, 因为这样做可以让远程缓存的页面(来自旧的已编译资源)依然对有已缓存页面有效.

NOTE. 如果你在本地预编译资源, 你可以在服务器上使用 +bundle install --without assets+ 去避免安装资源 gem ( Gemfile 里资源分组的 gems).

编译文件的默认匹配器包括 +application.js+, +application.css+ 和所有非 JS/CSS 文件 (会自动包含所有的图像资源):

<ruby>
[ Proc.new{ |path| !File.extname(path).in?(['.js', '.css']) }, /application.(css|js)$/ ]
</ruby>

NOTE. 那些匹配器 (和其它在预编译数组里的成员; 看下面) 适用已经最后编译好的文件名. 也就是说所有要编译成 JS/CSS 的文件都不会被包含, 要和 JS/CSS 文件一样; 例如, +.coffee+ 和 +.scss+ 文件都*不*会被自动包含进去,因为它们要编译成 JS/CSS.

如果又其它的 manifests 或者单独的式样和 JavaScript 文件要包含, 你应该将它们添加到 +precompile+ 数组里:

<erb>
config.assets.precompile += ['admin.js', 'admin.css', 'swfObject.js']
</erb>

rake 任务也会生成一个 +manifest.yml , 这个文件包含了所有资源和它们各自的指纹识别列表. 这被 Rails helper 方法用于避免将匹配请求调回给 Sprockets. 常规的资源清单文件像这样:

<plain>
---
rails.png: rails-bd9ad5a560b5a3a7be0808c5cd76a798.png
jquery-ui.min.js: jquery-ui-7e33882a28fc84ad0e0e47e46cbf901c.min.js
jquery.min.js: jquery-8a50feed8d29566738ad005e19fe1c2d.min.js
application.js: application-3fdab497b8fb70d20cfc5495239dfc29.js
application.css: application-8af74128f904600e41a6e39241464e03.css
</plain>

manifest 的默认位置是 +config.assets.prefix+ (默认为 '/assets') 指定的位置.
这可以在 +config.assets.manifest+ 选项更改, 并且必须指定一个完整的路径:

<erb>
config.assets.manifest = '/path/to/some/other/location'
</erb>

NOTE: 如果在生产环境中有已预编译资源的丢失, 你将会得到一个 <tt> Sprockets::Helpers::RailsHelper::AssetPaths::AssetNotPrecompiledError</tt> 异常去指明丢失的文件名.

h5. Far-future Expires header

已预编译的资源存在于文件系统里并且直接由你的 web 服务器提供。它们默认不具有 far-future 头部， 由于指纹识别的影响，你不得不更改你的服务器配置去添加它们。

对于 Apache:

<plain>
<LocationMatch "^/assets/.*$">
  # Use of ETag is discouraged when Last-Modified is present
  Header unset ETag
  FileETag None
  # RFC says only cache for 1 year
  ExpiresActive On
  ExpiresDefault "access plus 1 year"
</LocationMatch>
</plain>

对于 nginx:

<plain>
location ~ ^/assets/ {
  expires 1y;
  add_header Cache-Control public;

  add_header ETag "";
  break;
}
</plain>

h5. GZip 压缩器

当文件被预编译时， Sprockets 也会创建一个 "gzipped":http://en.wikipedia.org/wiki/Gzip (.gz) 版本的资源文件。 Web 服务器一般会配置使用一个适当的压缩率作为折衷方案，但由于预编译只发生一次，Sprockets 使用最大的压缩比率。 这样可以使传输的数据达到最小值。另外， web 服务器可以配置成直接从磁盘获取压缩内容， 而不用自己压缩这些未压缩文件。

Nginx 会在开启 +gzip_static+ 时自动这么做：

<plain>
location ~ ^/(assets)/  {
  root /path/to/public;
  gzip_static on; # to serve pre-gzipped version
  expires max;
  add_header Cache-Control public;
}
</plain>

这个指令在提供了该功能的核心模块被编译进 web 服务器时可用。 Ubuntu 的软件包, 即使是 +nginx-light+ 也有编译这个模块。不然， 你就需要自己手动编译：

<plain>
./configure --with-http_gzip_static_module
</plain>

如果你用 Phusion Passenger 编译 nginx， 那么你需要在提示这个选项时让它通过。

强制配置 Apache 是可行的，但棘手。 请 Google。 (或者请更新这个指南，如果你有对 Apache 很好的配置示例)

h4. 即时编译

有些情况你也像使用即时编译。在这个模式下，所有的资源请求都直接由 Sprockets 处理。

开启这个选项：

<erb>
config.assets.compile = true
</erb>

在第一次请求时，资源会被编译并以上面开发模式给出的方式被缓存。还有就是在 helpers 里用到的 manifest 的名字被改成含有 MD5 哈希值。

Sprockets 同时会将 +Cache-Control+ HTTP 头部设置为 +max-age=31536000+. 这告诉所有在你客户端浏览器和服务器之间的缓存将会被缓存 1 年。这样做的作用是减少了向服务器对这些资源的请求数量；这些资源能很好的缓存在本地浏览器缓存或者一些中间缓存。

这个模式使用更多的内存， 比默认的运行得更慢。也不建议这么做。

如果你将一个产品应用程序部署到任何没有预装 JavaScript 运行时的系统上时，你应该想要加入这个到你的 Gemfile 里:

<plain>
group :production do
  gem 'therubyracer'
end
</plain>

h3. 自定义 Pipeline

h4. CSS 压缩器

通常都选 YUI 压缩 CSS. "YUI CSS compressor":http://developer.yahoo.com/yui/compressor/css.html 提供最小化功能。

下面几行会启用 YUI 压缩器，这需要 +yui-compressor+ gem.

<erb>
config.assets.css_compressor = :yui
</erb>

+config.assets.compress+ 必须被设置为 +true+ 才能使用 CSS 压缩器

h4. JavaScript 压缩器

JavaScript 可选的压缩器有 +:closure+, +:uglifier+ 和 +:yui+。 它们分别需要 +closure-compiler+, +uglifier+ 或者 +yui+ gems。

Gemfile 默认包括 "uglifier":https://github.com/lautis/uglifier. 这个 gem 用 Ruby 封装了 "UglifierJS":https://github.com/mishoo/UglifyJS (为 NodeJS 所编写). 它通过去除空白符去压缩你的代码。它也包括其它的可定制选项如尽可能的将 +if+ 和 +else+ 表达式改成三元表达式。

如下引入 +uglifier+ JavaScript 压缩器:

<erb>
config.assets.js_compressor = :uglifier
</erb>

注意必须将 +config.assets.compress+ 设置为 +true+ 才能使用 JavaScript 压缩器

NOTE: 为了使用 +uglifier+，你需要 "ExecJS":https://github.com/sstephenson/execjs#readme 支持的运行时。如果你使用 Mac OS X 或者 Windows， 你的系统已经安装有 JavaScript 运行时了。 查阅 "ExecJS":https://github.com/sstephenson/execjs#readme 文档了解支持的 JavaScript 运行时.

h4. 使用你自己的压缩器

CSS 和  JavaScript 的压缩器配置设置也接受任何对象。 这个对象必须有一个接受一个字符串参数的 +compress+ 方法并且必须返回一个字符串。

<erb>
class Transformer
  def compress(string)
    do_something_returning_a_string(string)
  end
end
</erb>

传递一个 +new+ 对象给 +application.rb+ 里的配置选项：

<erb>
config.assets.css_compressor = Transformer.new
</erb>

h4. 改变 _assets_ 的路径

Sprockets 默认使用的公共路径为 +/assets+.

它可以被改成其它的：

<erb>
config.assets.prefix = "/some_other_path"
</erb>

h4. X-Sendfile Headers

X-Sendfile 头部是 web 服务器的一个指令,用于忽略来自应用程序的回应(response)而是提供磁盘里的指定文件. 这个选项默认是关闭的, 但也可以被开启,如果你的服务器支持它. 当开启时, 这将负责把文件提供给 web 服务器, 而且更快.

Apache 和 nginx 支持这个选项, 这可以在 <tt>config/environments/production.rb</tt> 里被开启.

<erb>
# config.action_dispatch.x_sendfile_header = "X-Sendfile" # for apache
# config.action_dispatch.x_sendfile_header = 'X-Accel-Redirect' # for nginx
</erb>

WARNING: 如果你升级一个已有的应用程序并且想使用这个选项, 务必只将这个配置选项粘贴进 +production.rb+ 和任何其它被定义为生产行为的环境 (不是 +application.rb+).

h3. 如何缓存

Sprockets 使用 Rails 默认的缓存存储去在开发和生产环境中缓存资源.

TODO: Add more about changing the defualt store.

h3. 为你的 Gems 添加资源

资源也来自外部源,以 gems 的形式.

一个很好的例子就是 +jquery-rails+ gem, 它来自 Rails 标准的 JavaScript 函式库 gem. 这个 gem 包含了一个继承了 +Rails::Engine+ 的 engine 类. 通过这么做, Rails 被告知这个 gem 的目录会包含资源, 然后这个 engine 的 +app/assets+, +lib/assets+ 和 +vendor/assets+ 目录会被添加到 Sprockets 的搜索路径里.

h3. 为你的函式库或者 Gem 做一个预处理器.

TODO: Registering gems on "Tilt":https://github.com/rtomayko/tilt enabling Sprockets to find them.

h3. 从旧的 Rails 版本升级

升级又两个步骤. 第一是 +public/+ 的文件移动到新的位置. 查阅上面的 "Asset Organization":#asset-organization 作为指导, 将不同格式的文件放放置到正确的位置.

第二是升级各种环境文件, 设置正确的默认选项. 下面的变更反映了 3.1.0 版本的默认值.

在 +application.rb+ 里:

<erb>
# Enable the asset pipeline
config.assets.enabled = true

# Version of your assets, change this if you want to expire all your assets
config.assets.version = '1.0'

# Change the path that assets are served from
# config.assets.prefix = "/assets"
</erb>

在 +development.rb+ 里:

<erb>
# Do not compress assets
config.assets.compress = false

# Expands the lines which load the assets
config.assets.debug = true
</erb>

还有 +production.rb+:

<erb>
# Compress JavaScripts and CSS
config.assets.compress = true

# Choose the compressors to use
# config.assets.js_compressor  = :uglifier
# config.assets.css_compressor = :yui

# Don't fallback to assets pipeline if a precompiled asset is missed
config.assets.compile = false

# Generate digests for assets URLs.
config.assets.digest = true

# Defaults to nil and saved in location specified by config.assets.prefix
# config.assets.manifest = YOUR_PATH

# Precompile additional assets (application.js, application.css, and all non-JS/CSS are already added)
# config.assets.precompile += %w( search.js )
</erb>

你不应该改变 +test.rb+. 测试环境中的默认值是: +config.assets.compile+ 为 true, +config.assets.compress+, +config.assets.debug+ 和 +config.assets.digest+ 为 false.

这些要被加入到 +Gemfile+ 里:

<plain>
# Gems used only for assets and not required
# in production environments by default.
group :assets do
  gem 'sass-rails',   "~> 3.1.0"
  gem 'coffee-rails', "~> 3.1.0"
  gem 'uglifier'
end
</plain>

如果你的 Bundler 使用 +assets+ 组, 请确认 +config/application.rb+ 有下列需求声明:

<ruby>
if defined?(Bundler)
  # If you precompile assets before deploying to production, use this line
  Bundler.require *Rails.groups(:assets => %w(development test))
  # If you want your assets lazily compiled in production, use this line
  # Bundler.require(:default, :assets, Rails.env)
end
</ruby>

而在旧的 3.0 版本是这样的:

<ruby>
# If you have a Gemfile, require the gems listed there, including any gems
# you've limited to :test, :development, or :production.
Bundler.require(:default, Rails.env) if defined?(Bundler)
</ruby>
